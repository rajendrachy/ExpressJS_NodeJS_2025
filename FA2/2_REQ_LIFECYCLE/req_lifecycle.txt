----------------Hereâ€™s the Express.js request lifecycle in short :------------------------
Client sends a request â†’ Express receives it as req and res.
Middleware runs in order â†’ logging, parsing, auth, etc.
Route matching â†’ Express finds the matching route by path + method.
Route handler executes â†’ business logic runs (DB calls, processing, etc.).
Response is sent â†’ via res.send(), res.json(), etc.
Error/404 handling â†’ if no route matches or error occurs.

------------------So basically:-----------------------
Request â†’ Middleware â†’ Route â†’ Response â†’ End âœ…







---------------blocking vs non-blocking code---------------
Blocking code â†’ Stops the event loop until it finishes â†’ other requests must wait.
Non-blocking code â†’ Doesnâ€™t stop the event loop â†’ frees it to handle other requests while waiting for I/O.
ðŸ‘‰ In Express, always prefer non-blocking (async) code for better performance and scalability








#----------------The Common HTTP Methods----------------------
GET â†’ Retrieve data
POST â†’ Send new data (create)
PUT â†’ Update/replace an existing resource
PATCH â†’ Update/modify part of a resource
DELETE â†’ Remove a resource
(Less common but still valid) OPTIONS, HEAD






